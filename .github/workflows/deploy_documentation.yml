name: Deploy documentation

on:
  release:
    types: [ published ]
  push:
    branches:
      - master

jobs:

  build_deploy:
    name: Build and deploy documentation

    runs-on: self-hosted

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up changed-files
      id: changed-files-for-docs
      uses: tj-actions/changed-files@v24.1
      with:
        path: docs
    
    - name: Check if deployment is needed
      run: |
        if [ ${{ steps.changed-files-for-docs.outputs.any_changed == 'true' }} = true ]; then
          echo "Deployment is needed"
          echo "DEPLOYMENT=true" >> "$GITHUB_ENV"
        else
          echo "No deployment is needed"
          echo "DEPLOYMENT=false" >> "$GITHUB_ENV"
        fi

    - name: Define version name
      if: ${{ env.DEPLOYMENT == 'true' }}
      run: |
        if [ ${{ startsWith(github.ref_name, 'dev') }} = true ]; then
          echo "VERSION_NAME=${{ github.ref_name }}" >> "$GITHUB_ENV"
        elif [ ${{ github.event.release.tag_name != '' }} = true ]; then
          echo "VERSION_NAME=${{ github.event.release.tag_name }}" >> "$GITHUB_ENV"
        else
          echo "VERSION_NAME=latest" >> "$GITHUB_ENV"
        fi
        echo 'Version to build: ${{ env.VERSION_NAME }}'

    - name: Install dependencies
      if: ${{ env.DEPLOYMENT == 'true' }}
      run: |
        echo "${GITHUB_WORKSPACE}/"
        cd "${GITHUB_WORKSPACE}/"
        pip3 install --user -r requirements.txt

    - name: Create new folder
      if: ${{ env.DEPLOYMENT == 'true' }}
      run: |
        echo "Creating new folder ${{ env.VERSION_NAME }}"
        mkdir -p /home/fmagalla/quasar/${{ env.VERSION_NAME }}

    - name: Build HTML documentation
      if: ${{ env.DEPLOYMENT == 'true' }}
      run: |
        cd "${GITHUB_WORKSPACE}/docs"
        sphinx-build -b html ./source ./_build/${{ env.VERSION_NAME }}
    
    - name: Build documentation PDF as ePUB
      if: ${{ env.DEPLOYMENT == 'true' }}
      run: |
        cd "${GITHUB_WORKSPACE}/docs"

        make epub
        cp ./build/epub/Quasar.epub ./_build/${{ env.VERSION_NAME }}
        mv ./_build/${{ env.VERSION_NAME }}/Quasar.epub ./_build/${{ env.VERSION_NAME }}/Quasar\ ${{ env.VERSION_NAME }}.epub

        make latexpdf
        cp ./build/latex/quasar.pdf ./_build/${{ env.VERSION_NAME }}
        mv ./_build/${{ env.VERSION_NAME }}/quasar.pdf ./_build/${{ env.VERSION_NAME }}/Quasar\ ${{ env.VERSION_NAME }}.pdf

    - name: Update server
      if: ${{ env.DEPLOYMENT == 'true' }}
      run: |
        echo 'Change directory location to build html'
        cd "${GITHUB_WORKSPACE}/docs/_build/${{ env.VERSION_NAME }}"

        echo 'Removing old build'
        rm -rf /home/fmagalla/quasar/${{ env.VERSION_NAME }}
        echo ${{ secrets.PASS_USER }} | sudo -S rm -rf /usr/share/nginx/quasar/${{ env.VERSION_NAME }}

        echo 'Copying new build to local'
        mkdir -p /home/fmagalla/quasar/${{ env.VERSION_NAME }}
        cp -a . /home/fmagalla/quasar/${{ env.VERSION_NAME }}/

        echo 'Copying to nginx folder'
        echo ${{ secrets.PASS_USER }} | sudo -S mkdir -p /usr/share/nginx/quasar/${{ env.VERSION_NAME }}
        sudo cp -r /home/fmagalla/quasar/${{ env.VERSION_NAME }} /usr/share/nginx/quasar

        echo 'Reloading nginx'
        echo ${{ secrets.PASS_USER }} | sudo -S nginx -s reload

    - name: Update EOS page
      if: ${{ env.VERSION_NAME == 'latest' && env.DEPLOYMENT == 'true' }}
      run: |
        cd "${GITHUB_WORKSPACE}/docs/_build/${{ env.VERSION_NAME }}"
  
        echo 'Removing old build'
        echo ${{ secrets.PASS_USER }} | sudo -S rm -rf /eos/project-q/quasar/www

        echo 'Copying new build to EOS
        echo ${{ secrets.PASS_USER }} | sudo -S mkdir -p /eos/project-q/quasar/www
        cp -a . /eos/project-q/quasar/www
